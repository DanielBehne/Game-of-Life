package com.mrjaffesclass.apcs.mvc.template;

import com.mrjaffesclass.apcs.messenger.*;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.BasicStroke;

/**
 * MVC Template This is a template of an MVC framework used by APCS for the
 * LandMine project (and others)
 *
 * @author Roger Jaffe
 * @version 1.0
 *
 */
public class View extends javax.swing.JFrame implements MessageHandler {

    private final Messenger mvcMessaging;

    //public static final int BOARD_SIZE = 8;
    //private static final int CELL_SIZE = 100;

    //Graphics g;

    private BoardPanel boardPanel1;

    public View(Messenger messages) {
        mvcMessaging = messages;   // Save the calling controller instance
        initComponents();           // Create and init the GUI components
        initBoard();
        //g = panel1.getGraphics();
        //panel1.paintComponents(g);
    }

    private void initBoard() {
        String[][] initialBoard = new String[8][8];
        boardPanel1 = new BoardPanel(initialBoard);
        getContentPane().add(boardPanel1);
        pack();
    }

    /**
     * Initialize the model here and subscribe to any required messages
     */
    public void init() {
        // Subscribe to messages here
        mvcMessaging.subscribe("boardChanged", this);
        mvcMessaging.subscribe("noMoves", this);
        mvcMessaging.subscribe("blackPieces", this);
        mvcMessaging.subscribe("whitePieces", this);
        mvcMessaging.subscribe("blackWin", this);
        mvcMessaging.subscribe("whiteWin", this);
        mvcMessaging.subscribe("gameTie", this);
        mvcMessaging.subscribe("blackMove", this);
        mvcMessaging.subscribe("whiteMove", this);

    }

    @Override
    public void messageHandler(String messageName, Object messagePayload) {
        if (messagePayload != null) {
            System.out.println("MSG: received by view: " + messageName + " | " + messagePayload.toString());
        } else {
            System.out.println("MSG: received by view: " + messageName + " | No data sent");
        }

//        if (messageName.equals("boardChanged")) {
//            String[][] board = (String[][]) messagePayload;
//            for (int w = 0; w < board.length; w++) {
//                for (int i = 0; i < board[0].length; i++) {
//                    if (board[w][i].equals("B")) {
//                        Graphics2D g2 = (Graphics2D) g;
//                        g2.setColor(Color.black);
//                        g.fillRect((w * 100) + 15, (i * 100) + 15, 70, 70);
//                    }
//                    if (board[w][i].equals("W")) {
//                        Graphics2D g2 = (Graphics2D) g;
//                        g2.setColor(Color.white);
//                        g.fillRect((w * 100) + 15, (i * 100) + 15, 70, 70);
//                    }
//                }
//            }
//        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onClick(evt);
            }
        });

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 819, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onClick
        // TODO add your handling code here:
//        int x = evt.getX() / CELL_SIZE;
//        int y = evt.getY() / CELL_SIZE;
//        String placeX = String.valueOf(x);
//        String placeY = String.valueOf(y);
//        String place = placeX + placeY;
//        this.mvcMessaging.notify("playerMove", place);
//        this.mvcMessaging.notify("checkState");
    }//GEN-LAST:event_onClick

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Panel panel1;
    // End of variables declaration//GEN-END:variables

}
